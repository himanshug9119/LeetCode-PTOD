class Solution {
public:
    int leftIndex(vector<int>&nums , int target , int low , int high){
        int n = nums.size();
        if(low<=high){
            int mid = low + (high-low)/2;
            if(nums[mid]==target){
                if(mid == 0) return mid;
                if(nums[mid-1] < target)
                    return mid;
                else return leftIndex(nums , target, low , mid-1);
            }else if(nums[mid]<target){
                return leftIndex(nums , target, mid+1, high);
            }else{
                return leftIndex(nums, target, low , mid-1);
            }
        }else{
            return -1;
        }
    }
    int rightIndex(vector<int>&nums , int target, int low , int high){
        int n = nums.size();
        int mid = low + (high-low)/2;
        if(low<=high){
            if(nums[mid]==target){
                if(mid == n-1) return mid;
                if(nums[mid+1] > target)
                    return mid;
                else return rightIndex(nums , target, mid+1 , high);
            }else if(nums[mid]<target){
                return rightIndex(nums , target, mid+1, high);
            }else{
                return rightIndex(nums, target, low , mid-1);
            }
        }else{
            return -1;
        }
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        int left = leftIndex(nums , target, 0, nums.size()-1);
        int right = rightIndex(nums , target , 0 , nums.size()-1);
        return {left, right};
    }
};
